name: CI/CD

env:
  # Using Quay.io
  REGISTRY: quay.io/dabreadman
  REGISTRY_USERNAME: dabreadman
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  # OpenShift Token
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  APP_PORT: 8080
  OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}
  OPENSHIFT_PROD: ${{ secrets.OPENSHIFT_PROD }}

  APP_NAME: "covid-app"
  TAG: ""

on:
  push:
  workflow_dispatch:

jobs:
  dev-deployment:
    name: Build and deploy to OpenShift Dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./covid-vue-app
    environment: development

    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
      - name: Check if secrets exists
        uses: actions/github-script@v3
        with:
          script: |
            const secrets = {
              REGISTRY_PASSWORD: `${{ env.REGISTRY_PASSWORD }}`,
              OPENSHIFT_SERVER: `${{ env.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ env.OPENSHIFT_TOKEN }}`,
            };

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.warning(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;

            });

            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }

      - uses: actions/checkout@v2

      - name: Determine app name
        if: env.APP_NAME == ''
        run: |
          echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Determine tag
        if: env.TAG == ''
        run: |
          echo "TAG=${GITHUB_SHA::7}" | tee -a $GITHUB_ENV

      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11

      - name: Create Image
        run: podman build . --file Dockerfile --tag ${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.TAG }}

      - name: Registry Autherisation
        run: podman login -u ${{ env.REGISTRY_USERNAME }} -p ${{ env.REGISTRY_PASSWORD }} quay.io
      - name: Push to registry
        run: podman push ${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.TAG }}

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Create and expose app
        id: deploy-and-expose
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ env.APP_NAME }}
          image: ${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.TAG }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          port: ${{ env.APP_PORT }}
          
      - name: Pass image reference
        id: image
        run: echo "::set-output name=image::${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.TAG }}"

  prod-deployment:
    name: Deploy to OpenShift Production
    needs: [dev-deployment]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./covid-vue-app
    environment: production

    steps:
      - name: Download image
        run: docker pull ${{ needs.dev-deployment.outputs.image }}
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_PROD }}

      - name: Create and expose app
        id: deploy-and-expose
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ env.APP_NAME }}
          image: ${{ needs.dev-deployment.outputs.image }}
          namespace: ${{ env.OPENSHIFT_PROD }}
          port: ${{ env.APP_PORT }}
